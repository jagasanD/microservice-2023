server.port=${PORT:0}
spring.application.name=users-ws
eureka.client.registerWithEureka=true
eureka.client.fetchRegistry=true
eureka.client.serviceUrl.defaultZone=http://localhost:8010/eureka
spring.devtools.restart.enabled=true
eureka.instance.instance-id=${spring.application.name}:${spring.application.instance-id:${random.value}}





spring.datasource.url=jdbc:mysql://localhost:3306/microservice
spring.datasource.username=root
spring.datasource.password=root
spring.jpa.hibernate.ddl-auto=update

tocken.expiration_time=3600000
tocken.secret=dgjorufhrsnjdu438fkdj38fdmcv7dm3ckvhrsnjjuwelueivhe848fhedldh5ndk
login.url.path=/users/login

basic.message=message from local properties file
#connect to configServer
spring.config.import=optional:configserver:http://localhost:8012

spring.cloud.config.name=users-ws
#Connect to kafka system
spring.cloud.bus.enabled = true
spring.cloud.stream.kafka.binder.zkNodes=localhost:2181
spring.cloud.stream.kafka.binder.brokers=localhost:9092

management.endpoints.web.exposure.include=*
management.endpoint.health.enabled=true
management.endpoint.health.show-details=always
management.health.circuitbreakers.enabled=true

resilience4j.circuitbreaker.circuit-breaker-aspect-order=1
#configuration %if threshod failed to open circuirt breaker
resilience4j.circuitbreaker.instances.albums-ws.failure-rate-threshold=50
#size 6 means if request calls 3 is failed out 6 six(means 50% failed) then circuit breaker will OPEN state
resilience4j.circuitbreaker.instances.albums-ws.sliding-window-size=6
#setting default HALF-OPEN state 
resilience4j.circuitbreaker.instances.albums-ws.automatic-transition-from-open-to-half-open-enabled=true
#The time that the CircuitBreaker should wait before transitioning from open to half-open.
resilience4j.circuitbreaker.instances.albums-ws.wait-duration-in-open-state=20s

resilience4j.circuitbreaker.instances.albums-ws.sliding-window-type=count-based
#store recording buffer 10 records only
resilience4j.circuitbreaker.instances.albums-ws.event-consumer-buffer-size=10
#failure rate start calcluation after 2 request failed 
#resilience4j.circuitbreaker.instances.albums-ws.minimum-number-of-calls=2

resilience4j.retry.retry-aspect-order=2
resilience4j.retry.instances.albums-ws.max-attempts=3
resilience4j.retry.instances.albums-ws.wait-duration=2s
# it will increase waiting every failure calls like 2s, 2*5=10s, 10*5 =50s
resilience4j.retry.instances.albums-ws.enable-exponential-backoff=true
resilience4j.retry.instances.albums-ws.exponential-backoff-multiplier=5


logging.level.com.example.photoAppUser.feignClient.AlbumFeignClient=DEBUG

#management.zipkin.tracing.endpoint=http://localhost:9411

# Trace every action
management.tracing.sampling.probability=1.0
management.tracing.enabled=true
management.zipkin.tracing.endpoint= http://localhost:9411/api/v2/spans
logging.pattern.level="trace_id=%mdc{traceId} span_id=%mdc{spanId} trace_flags=%mdc{traceFlags} %p"

logging.file.name=users-ws.log


