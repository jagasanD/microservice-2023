package com.example.APIGateway;


import org.springframework.cloud.gateway.filter.GatewayFilter;
import org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.server.reactive.ServerHttpRequest;
import org.springframework.http.server.reactive.ServerHttpResponse;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;

import reactor.core.publisher.Mono;
@Component
public class AuthorizationFilter extends AbstractGatewayFilterFactory<AuthorizationFilter.Config>{

	public static class Config{
		
	}

	@Override
	public GatewayFilter apply(Config config) {
		// TODO Auto-generated method stub
		System.out.println("************** calling Gateway API router filter **************");
		return (exchange,chain)->{
			ServerHttpRequest req = exchange.getRequest();
			if(!req.getHeaders().containsKey("Authorization")) {
				return OnError(exchange, "Not Authorized header",HttpStatus.UNAUTHORIZED);
			}
		};
	}

	private Mono<Void> OnError(ServerWebExchange exchange, String message, HttpStatus scUnauthorized) {
		// TODO Auto-generated method stub
		  ServerHttpResponse response = exchange.getResponse();
		  response.setStatusCode(scUnauthorized);
		return null;
	}
}
