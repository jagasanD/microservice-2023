server.port=${PORT:8082}
spring.application.name=api-gateway
eureka.client.serviceUrl.defaultZone=http://localhost:8010/eureka
eureka.instance.instance-id=${spring.application.name}:${spring.application.instance-id:${random.value}}

#spring.cloud.gateway.discovery.locator.enabled=true
#allow application name lower case to call other microservice via api gateway
#spring.cloud.gateway.discovery.locator.lower-case-service-id=true

#give unique id each router index
spring.cloud.gateway.routes[0].id=users-status-check
#here giving to loader balancer will search IP address and prot number for users service based on name
spring.cloud.gateway.routes[0].uri=lb://users-ws
#user-ws path validation 
spring.cloud.gateway.routes[0].predicates[0]=Path=/users/status/check
#user-ws http method validation
spring.cloud.gateway.routes[0].predicates[1]=Method=GET
# validate header key 'Authorization' must present with below follow by 'Bearer' 
spring.cloud.gateway.routes[0].predicates[2]=Header=Authorization, Bearer (.*)
#remove cookies from coming request 
spring.cloud.gateway.routes[0].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[0].filters[1]=AuthorizationFilter

#below example is RewritePath suppose url is coming with '/users-ws/users/status/check' but
#here we dont have such url in internal such senarious we can RewritePath what coming url match then redirect
#to internal url which are aviable in service '/users/status/check'
#give unique id each router index
spring.cloud.gateway.routes[1].id=users-ws-id
#here giving to loader balancer will search IP address and prot number for users service based on name
spring.cloud.gateway.routes[1].uri=lb://users-ws
#user-ws path validation 
spring.cloud.gateway.routes[1].predicates[0]=Path=/users-ws/users/status/check
#user-ws http method validation
spring.cloud.gateway.routes[1].predicates[1]=Method=GET
#remove cookies from coming request 
spring.cloud.gateway.routes[1].filters[0]=RemoveRequestHeader=Cookie
#what url is coming and where to redirect actual service 
spring.cloud.gateway.routes[1].filters[1]=RewritePath=/users-ws/users/status/check,/users/status/check


spring.cloud.gateway.routes[2].id=users-ws-save
spring.cloud.gateway.routes[2].uri=lb://users-ws 
spring.cloud.gateway.routes[2].predicates[0]=Path=/users/save
spring.cloud.gateway.routes[2].predicates[1]=Method=POST

spring.cloud.gateway.routes[3].id=users-ws-login
spring.cloud.gateway.routes[3].uri=lb://users-ws 
spring.cloud.gateway.routes[3].predicates[0]=Path=/users/login
spring.cloud.gateway.routes[3].predicates[1]=Method=POST


spring.cloud.gateway.routes[4].id=users-ws-get-put-delete
spring.cloud.gateway.routes[4].uri=lb://users-ws 
spring.cloud.gateway.routes[4].predicates[0]=Path=/users/**
spring.cloud.gateway.routes[4].predicates[1]=Method=GET,PUT,DELETE
spring.cloud.gateway.routes[4].predicates[2]=Header=Authorization, Bearer (.*)
#remove cookies from coming request 
spring.cloud.gateway.routes[4].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[4].filters[1]=AuthorizationFilter




tocken.secret =eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVjOWYzYWI2NzY2Mjg2NDYyNDY0YTczNCIsIm5hbWUiOiJSYW5keSIsImF2YXRhciI6Ii8vd3d3LmdyYXZhdGFyLmNvbS9hdmF0YXIvMTNhN2MyYzdkOGVkNTNkMDc2MzRkOGNlZWVkZjM0NTE_cz0yMDAmcj1wZyZkPW1tIiwiaWF0IjoxNTU0NTIxNjk1LCJleHAiOjE1NTQ1MjUyOTV9SxRurShXS-SI3SE11z6nme9EoaD29T_DBFr8Qwngkg

