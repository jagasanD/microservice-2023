package com.example.APIGateway;

import java.security.KeyPair;

import javax.crypto.SecretKey;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.gateway.filter.GatewayFilter;
import org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpStatus;
import org.springframework.http.server.reactive.ServerHttpRequest;
import org.springframework.http.server.reactive.ServerHttpResponse;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;
import reactor.core.publisher.Mono;

@Component
public class AuthorizationFilter extends AbstractGatewayFilterFactory<AuthorizationFilter.Config> {

	@Autowired
	Environment env;

	public AuthorizationFilter() {
		super(Config.class);
	}

	public static class Config {
		// put configuration properties here.
	}

	@Override
	public GatewayFilter apply(Config config) {
		// TODO Auto-generated method stub
		System.out.println("************** calling Gateway API router filter **************");
		return (exchange, chain) -> {
			ServerHttpRequest req = exchange.getRequest();
			if (!req.getHeaders().containsKey("Authorization")) {
				System.out.println("************** calling Gateway API header missing **************");
				return OnError(exchange, "Not Authorized header", HttpStatus.UNAUTHORIZED);
			}
			String jwttoken = req.getHeaders().get("Authorization").get(0);
			String jwtPrefix = jwttoken.replace("Bearer", "");
			if (!validateToken(jwtPrefix.trim())) {
				return OnError(exchange, "JWT token not valid", HttpStatus.UNAUTHORIZED);
			}
			return chain.filter(exchange);
		};
	}

	private Mono<Void> OnError(ServerWebExchange exchange, String message, HttpStatus scUnauthorized) {
		ServerHttpResponse response = exchange.getResponse();
		response.setStatusCode(scUnauthorized);
		return response.setComplete();
	}

	private boolean validateToken(String jwtToken) {

		 KeyPair keys = Keys.keyPairFor(SignatureAlgorithm.RS512);
		System.out.println("token ************ "+jwtToken);
		try {
			/*String subject = Jwts.parser().setSigningKey(env.getProperty("tocken.secret").getBytes()).parseClaimsJws(jwtToken)
					.getBody().getSubject();*/
			
			SecretKey secret = Keys.hmacShaKeyFor(Decoders.BASE64.decode(env.getProperty("tocken.secret")));
			/*String subject = Jwts.parserBuilder().setSigningKey(secret)
					.build().parseClaimsJws(jwtToken)
					.getBody()
					.getSubject();*/
			
			String subject = Jwts.parserBuilder().setSigningKey(keys.getPublic())
					.build()
					.parseClaimsJws(jwtToken).getBody().getSubject();
			
			if (subject == null || subject.isEmpty()) {
				return false;
			}
		} catch (Exception e) {
			e.printStackTrace();
			return true;
		}
		return true;
	}
}
